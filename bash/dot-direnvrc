#!/bin/bash
export LC_ALL=en_GB.UTF-8
export LANG=en_GB.utf-8
export EDITOR="emacsclient"
export GIT_EDITOR="emacsclient"

source "$(asdf direnv hook asdf)"

function _scoiatael_maybe_PATH_add() {
    [ -z "$VERBOSE" ] || log_status "Trying dir $1.."
    if test -d "$1";
    then
        PATH_add "$1"
        [ -z "$VERBOSE" ] || log_status "..ok"
    else
        [ -z "$VERBOSE" ] || log_status "..not found"
    fi
}

function _scoiatael_launch_gpg_agent() {
    if [ "Linux" = "$(uname)" ]; then
        systemctl --user enable --now 'gpg-agent.socket'
    else
        gpgconf --launch gpg-agent
    fi
}


function _scoiatael_init() {
    [ -z "$VERBOSE" ] || log_status "Start init.."
    export GOPATH=$HOME/go
    PATH_add "$GOPATH/bin"

    [ -z "$VERBOSE" ] || log_status "Extending PATH.."
    _scoiatael_maybe_PATH_add "/usr/local/MacGPG2/bin"
    _scoiatael_maybe_PATH_add "$HOME/.emacs.d/bin"
    _scoiatael_maybe_PATH_add "$HOME/.local/bin"
    _scoiatael_maybe_PATH_add "$HOME/.asdf/shims"
    _scoiatael_maybe_PATH_add "/usr/local/opt/sqlite/bin"
    _scoiatael_maybe_PATH_add "/usr/local/Caskroom/google-cloud-sdk/latest/google-cloud-sdk/bin"

    [ -z "$VERBOSE" ] || log_status "Starting GPG agent.."
    local ssh_agent
    ssh_agent="$(gpgconf --list-dirs agent-ssh-socket)"
    if [ -z "$SSH_AUTH_SOCK" ] || [ "$SSH_AUTH_SOCK" != "$ssh_agent" ];
    then
        if [ -S "$ssh_agent" ]; then
            [ -z "$VERBOSE" ] || log_status "Agent already running"
        else
            _scoiatael_launch_gpg_agent;
            [ -z "$VERBOSE" ] || log_status "Agent dead or missing; started new"
        fi
        export SSH_AUTH_SOCK=$ssh_agent
    fi

    export CLOUDSDK_PYTHON=python

    if [ -e $HOME/.nix-profile/etc/profile.d/nix.sh ]; then . $HOME/.nix-profile/etc/profile.d/nix.sh; fi # added by Nix installer

    [ -z "$VERBOSE" ] || log_status "Done."
}

function use_sops() {
    has sops || (log_status "Please install sops (https://github.com/mozilla/sops#download) first"; exit 1)

    local SECRET_FILE
    SECRET_FILE=".envrc.enc.yaml"
    [ -f "$SECRET_FILE" ] || (log_status "$SECRET_FILE not found, not loading secrets"; exit 1)

    # shellcheck disable=SC2154
    direnv_load sops exec-env "$SECRET_FILE" "$direnv dump"
    watch_file "$SECRET_FILE"
}

_scoiatael_init > /dev/null
