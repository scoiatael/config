;; -*- mode: emacs-lisp -*-
;; This file is loaded by Spacemacs at startup.
;; It must be stored in your home directory.

(setq-default exec-path-from-shell-shell-name "bash")

(defun dotspacemacs/layers ()
  "Configuration Layers declaration.
You should not put any user code in this function besides modifying the variable
values."
  (setq-default
   ;; Base distribution to use. This is a layer contained in the directory
   ;; `+distribution'. For now available distributions are `spacemacs-base'
   ;; or `spacemacs'. (default 'spacemacs)
   dotspacemacs-distribution 'spacemacs
   ;; List of additional paths where to look for configuration layers.
   ;; Paths must have a trailing slash (i.e. `~/.mycontribs/')
   dotspacemacs-configuration-layer-path '( "~/dotfiles/emacs/layers.d/" )
   ;; List of configuration layers to load. If it is the symbol `all' instead
   ;; of a list then all discovered layers will be installed.
   dotspacemacs-configuration-layers
   '(
     csv
     games
     sql
     (python :variables python-enable-yapf-format-on-save t)
     nginx
     ;; ----------------------------------------------------------------
     ;; Example of useful layers you may want to use right away.
     ;; Uncomment some layer names and press <SPC f e R> (Vim style) or
     ;; <M-m f e R> (Emacs style) to install them.
     ;; ----------------------------------------------------------------
     (auto-completion :variables
                      auto-completion-return-key-behavior 'complete
                      auto-completion-tab-key-behavior 'cycle
                      auto-completion-complete-with-key-sequence "jk"
                      auto-completion-enable-help-tooltip t
                      auto-completion-enable-sort-by-usage t
                      auto-completion-enable-snippets-in-popup t)
     search-engine
     ipython-notebook
     semantic
     better-defaults
     racket
     emacs-lisp
     (git :variables
          git-gutter-use-fringe t)
     markdown
     org
     ;; (shell :variables
     ;;        shell-default-height 30
     ;;        shell-default-shell 'ansi-term
     ;;        shell-default-position 'bottom)
     salt
     ansible
     (spell-checking :variables spell-checking-enable-auto-dictionary t)
     shell-scripts
     (syntax-checking :variables syntax-checking-enable-tooltips nil)
     version-control
     (evil-snipe :variables evil-snipe-enable-alternate-f-and-t-behaviors t )
     ocaml
     (c-c++ :variables c-c++-enable-clang-support t)
     (ruby :variables ruby-test-runner 'rspec)
     go
     colors
     themes-megapack
     evil-commentary
     lua
     yaml
     latex
     sml
     hlinum
     javascript
     (clojure :variables clojure-enable-fancify-symbols t)
     chrome
     seeing-is-believing
     (haskell :variables
              haskell-enable-hindent-style "gibansky"

              haskell-enable-ghci-ng-support t)
     rust
     docker
     elixir
     html
     gtags
     docker
     systemd
     )
   ;; List of additional packages that will be installed without being
   ;; wrapped in a layer. If you need some configuration for these
   ;; packages then consider to create a layer, you can also put the
   ;; configuration in `dotspacemacs/config'.
   dotspacemacs-additional-packages '(llvm-mode
                                      groovy-mode
                                      evil-terminal-cursor-changer
                                      s
                                      grizzl
                                      splitjoin
                                      evil-nerd-commenter
                                      google-this
                                      feature-mode
                                      latex-preview-pane
                                      latex-pretty-symbols
                                      jsx-mode)
   ;; A list of packages and/or extensions that will not be install and loaded.
   dotspacemacs-excluded-packages '()
   ;; If non-nil spacemacs will delete any orphan packages, i.e. packages that
   ;; are declared in a layer which is not a member of
   ;; the list `dotspacemacs-configuration-layers'. (default t)
   dotspacemacs-delete-orphan-packages t))

(defun dotspacemacs/init ()
  "Initialization function.
This function is called at the very startup of Spacemacs initialization
before layers configuration.
You should not put any user code in there besides modifying the variable
values."
  ;; This setq-default sexp is an exhaustive list of all the supported
  ;; spacemacs settings.
  (setq-default
   ;; If non nil ELPA repositories are contacted via HTTPS whenever it's
   ;; possible. Set it to nil if you have no way to use HTTPS in your
   ;; environment, otherwise it is strongly recommended to let it set to t.
   ;; This variable has no effect if Emacs is launched with the parameter
   ;; `--insecure' which forces the value of this variable to nil.
   ;; (default t)
   dotspacemacs-elpa-https t
   ;; Maximum allowed time in seconds to contact an ELPA repository.
   dotspacemacs-elpa-timeout 5
   ;; If non nil then spacemacs will check for updates at startup
   ;; when the current branch is not `develop'. (default t)
   dotspacemacs-check-for-update t
   ;; One of `vim', `emacs' or `hybrid'. Evil is always enabled but if the
   ;; variable is `emacs' then the `holy-mode' is enabled at startup. `hybrid'
   ;; uses emacs key bindings for vim's insert mode, but otherwise leaves evil
   ;; unchanged. (default 'vim)
   dotspacemacs-editing-style 'vim
   ;; If non nil output loading progress in `*Messages*' buffer. (default nil)
   dotspacemacs-verbose-loading nil
   ;; Specify the startup banner. Default value is `official', it displays
   ;; the official spacemacs logo. An integer value is the index of text
   ;; banner, `random' chooses a random text banner in `core/banners'
   ;; directory. A string value must be a path to an image format supported
   ;; by your Emacs build.
   ;; If the value is nil then no banner is displayed. (default 'official)
   dotspacemacs-startup-banner 'official
   ;; List of items to show in the startup buffer. If nil it is disabled.
   ;; Possible values are: `recents' `bookmarks' `projects'.
   ;; (default '(recents projects))
   dotspacemacs-startup-lists '(recents projects)
   ;; Number of recent files to show in the startup buffer. Ignored if
   ;; `dotspacemacs-startup-lists' doesn't include `recents'. (default 5)
   dotspacemacs-startup-recent-list-size 5
   ;; Default major mode of the scratch buffer (default `text-mode')
   dotspacemacs-scratch-mode 'text-mode
   ;; List of themes, the first of the list is loaded when spacemacs starts.
   ;; Press <SPC> T n to cycle to the next theme in the list (works great
   ;; with 2 themes variants, one dark and one light)
   dotspacemacs-themes '(solarized-dark
                         spacemacs-dark
                         spacemacs-light
                         solarized-light
                         leuven
                         monokai
                         zenburn)
   ;; If non nil the cursor color matches the state color in GUI Emacs.
   dotspacemacs-colorize-cursor-according-to-state t
   ;; Default font. `powerline-scale' allows to quickly tweak the mode-line
   ;; size to make separators look not too crappy.
   dotspacemacs-default-font '("Liberation Mono for Powerline"
                               :height 14.0
                               :weight normal
                               :width normal
                               :powerline-scale 1.0)
   ;; The leader key
   dotspacemacs-leader-key "SPC"
   ;; The leader key accessible in `emacs state' and `insert state'
   ;; (default "M-m")
   dotspacemacs-emacs-leader-key "M-m"
   ;; Major mode leader key is a shortcut key which is the equivalent of
   ;; pressing `<leader> m`. Set it to `nil` to disable it. (default ",")
   dotspacemacs-major-mode-leader-key ","
   ;; Major mode leader key accessible in `emacs state' and `insert state'.
   ;; (default "C-M-m)
   dotspacemacs-major-mode-emacs-leader-key "C-M-m"
   ;; These variables control whether separate commands are bound in the GUI to
   ;; the key pairs C-i, TAB and C-m, RET.
   ;; Setting it to a non-nil value, allows for separate commands under <C-i>
   ;; and TAB or <C-m> and RET.
   ;; In the terminal, these pairs are generally indistinguishable, so this only
   ;; works in the GUI. (default nil)
   dotspacemacs-distinguish-gui-tab nil
   ;; (Not implemented) dotspacemacs-distinguish-gui-ret nil
   ;; The command key used for Evil commands (ex-commands) and
   ;; Emacs commands (M-x).
   ;; By default the command key is `:' so ex-commands are executed like in Vim
   ;; with `:' and Emacs commands are executed with `<leader> :'.
   dotspacemacs-command-key ":"
   ;; If non nil `Y' is remapped to `y$'. (default t)
   dotspacemacs-remap-Y-to-y$ t
   ;; Name of the default layout (default "Default")
   dotspacemacs-default-layout-name "Default"
   ;; If non nil the default layout name is displayed in the mode-line.
   ;; (default nil)
   dotspacemacs-display-default-layout nil
   ;; If non nil then the last auto saved layouts are resume automatically upon
   ;; start. (default nil)
   dotspacemacs-auto-resume-layouts nil
   ;; Location where to auto-save files. Possible values are `original' to
   ;; auto-save the file in-place, `cache' to auto-save the file to another
   ;; file stored in the cache directory and `nil' to disable auto-saving.
   ;; (default 'cache)
   dotspacemacs-auto-save-file-location 'cache
   ;; Maximum number of rollback slots to keep in the cache. (default 5)
   dotspacemacs-max-rollback-slots 5
   ;; If non nil then `ido' replaces `helm' for some commands. For now only
   ;; `find-files' (SPC f f), `find-spacemacs-file' (SPC f e s), and
   ;; `find-contrib-file' (SPC f e c) are replaced. (default nil)
   dotspacemacs-use-ido nil
   ;; If non nil, `helm' will try to minimize the space it uses. (default nil)
   dotspacemacs-helm-resize nil
   ;; if non nil, the helm header is hidden when there is only one source.
   ;; (default nil)
   dotspacemacs-helm-no-header nil
   ;; define the position to display `helm', options are `bottom', `top',
   ;; `left', or `right'. (default 'bottom)
   dotspacemacs-helm-position 'bottom
   ;; If non nil the paste micro-state is enabled. When enabled pressing `p`
   ;; several times cycle between the kill ring content. (default nil)
   dotspacemacs-enable-paste-micro-state t
   ;; Which-key delay in seconds. The which-key buffer is the popup listing
   ;; the commands bound to the current keystroke sequence. (default 0.4)
   dotspacemacs-which-key-delay 0.4
   ;; Which-key frame position. Possible values are `right', `bottom' and
   ;; `right-then-bottom'. right-then-bottom tries to display the frame to the
   ;; right; if there is insufficient space it displays it at the bottom.
   ;; (default 'bottom)
   dotspacemacs-which-key-position 'bottom
   ;; If non nil a progress bar is displayed when spacemacs is loading. This
   ;; may increase the boot time on some systems and emacs builds, set it to
   ;; nil to boost the loading time. (default t)
   dotspacemacs-loading-progress-bar t
   ;; If non nil the frame is fullscreen when Emacs starts up. (default nil)
   ;; (Emacs 24.4+ only)
   dotspacemacs-fullscreen-at-startup t
   ;; If non nil `spacemacs/toggle-fullscreen' will not use native fullscreen.
   ;; Use to disable fullscreen animations in OSX. (default nil)
   dotspacemacs-fullscreen-use-non-native nil
   ;; If non nil the frame is maximized when Emacs starts up.
   ;; Takes effect only if `dotspacemacs-fullscreen-at-startup' is nil.
   ;; (default nil) (Emacs 24.4+ only)
   dotspacemacs-maximized-at-startup nil
   ;; A value from the range (0..100), in increasing opacity, which describes
   ;; the transparency level of a frame when it's active or selected.
   ;; Transparency can be toggled through `toggle-transparency'. (default 90)
   dotspacemacs-active-transparency 90
   ;; A value from the range (0..100), in increasing opacity, which describes
   ;; the transparency level of a frame when it's inactive or deselected.
   ;; Transparency can be toggled through `toggle-transparency'. (default 90)
   dotspacemacs-inactive-transparency 90
   ;; If non nil unicode symbols are displayed in the mode line. (default t)
   dotspacemacs-mode-line-unicode-symbols t
   ;; If non nil smooth scrolling (native-scrolling) is enabled. Smooth
   ;; scrolling overrides the default behavior of Emacs which recenters the
   ;; point when it reaches the top or bottom of the screen. (default t)
   dotspacemacs-smooth-scrolling t
   ;; If non nil line numbers are turned on in all `prog-mode' and `text-mode'
   ;; derivatives. If set to `relative', also turns on relative line numbers.
   ;; (default nil)
   dotspacemacs-line-numbers 't
   ;; If non-nil smartparens-strict-mode will be enabled in programming modes.
   ;; (default nil)
   dotspacemacs-smartparens-strict-mode t
   ;; Select a scope to highlight delimiters. Possible values are `any',
   ;; `current', `all' or `nil'. Default is `all' (highlight any scope and
   ;; emphasis the current one). (default 'all)
   dotspacemacs-highlight-delimiters 'all
   ;; If non nil advises quit functions to keep server open when quitting.
   ;; (default nil)
   dotspacemacs-persistent-server nil
   ;; List of search tool executable names. Spacemacs uses the first installed
   ;; tool of the list. Supported tools are `ag', `pt', `ack' and `grep'.
   ;; (default '("ag" "pt" "ack" "grep"))
   dotspacemacs-search-tools '("ag" "pt" "ack" "grep")
   ;; The default package repository used if no explicit repository has been
   ;; specified with an installed package.
   ;; Not used for now. (default nil)
   dotspacemacs-default-package-repository nil
   ;; Delete whitespace while saving buffer. Possible values are `all'
   ;; to aggressively delete empty line and long sequences of whitespace,
   ;; `trailing' to delete only the whitespace at end of lines, `changed'to
   ;; delete only whitespace for changed lines or `nil' to disable cleanup.
   ;; (default nil)
   dotspacemacs-whitespace-cleanup nil
   ))

(defun dotspacemacs/user-init ()
  "Initialization function for user code.
It is called immediately after `dotspacemacs/init'.  You are free to put any
user code."

  (setq vc-follow-symlinks t)

  ;; Files with the following extensions should open in javascript-mode
  (add-to-list 'auto-mode-alist '("\\.jsx$" . javascript-mode))
  (add-to-list 'auto-mode-alist '("\\.es6$" . javascript-mode))
  (add-to-list 'auto-mode-alist '("\\.js$" . javascript-mode))

  (add-hook 'before-save-hook 'delete-trailing-whitespace)

  ;; Projectile use grizzl
  (setq projectile-indexing-method 'alien)
  (setq projectile-enable-caching t)
  (setq projectile-completion-system 'grizzl)

  ;; Autocomplete tweaks
  ;; see http://auto-complete.org/doc/manual.html#configuration
  (setq-default ac-auto-show-menu 0.1)
  (setq-default ac-delay 0.1)
  (setq-default ac-use-fuzzy t)

  ;; Use spaces instead of tabs, width of tab is 2 spaces
  (setq tab-width 2)
  (setq-default tab-width 2)
  (setq standard-indent 2)
  (setq-default standard-indent 2)
  (setq indent-tabs-mode nil)
  (setq-default indent-tabs-mode nil)

  (require 'org)
  (require 'ox-beamer)
  (add-to-list 'org-modules 'org-table)
  (setq org-export-backends '(beamer html latex md gfm))

  ;; Change powerline (modeline) separator to arrow
  (setq powerline-default-separator 'arrow)

  ;; Set ispell language to avoid 'No word list can be found for language "en_GB" error'
  (setq ispell-dictionary "english")


  (setq-default shm-auto-insert-skeletons nil)
  (setq-default shm-display-quarantine nil)

  (eval-after-load "hideshow"
    '(add-to-list 'hs-special-modes-alist
                  `(ruby-mode
                    ,(rx (or "def" "class" "module" "{" "[")) ; Block start
                    ,(rx (or "}" "]" "end"))                  ; Block end
                    ,(rx (or "#" "=begin"))                   ; Comment start
                    ruby-forward-sexp nil)))

  (defun leo-markdown-fontify-buffer-wiki-links-empty ()
    "Empty replacement for `markdown-fontify-buffer-wiki-links` due to hanging bug."
    (interactive))

  (eval-after-load "markdown-mode"
    '(progn
       (fset 'markdown-fontify-buffer-wiki-links
             'leo-markdown-fontify-buffer-wiki-links-empty)))

  (set-fontset-font "fontset-default" nil "Symbola")


  (add-hook 'haskell-mode-hook (lambda () "set SHM faces"
                                  (progn
                                    ;; Structured Haskell Mode
                                    (set-face-background 'shm-current-face "#073642")
                                    (set-face-background 'shm-quarantine-face "#886e75")
                                    )))

  ;; I use RVM for all ruby installations
  (setq-default ruby-version-manager 'rvm))

(defun dotspacemacs/user-config ()
  "Configuration function for user code.
 This function is called at the very end of Spacemacs initialization after
layers configuration. You are free to put any user code."

  (exec-path-from-shell-copy-env "SSH_AGENT_PID")
  (exec-path-from-shell-copy-env "SSH_AUTH_SOCK")

  (when (not (display-graphic-p))
    (require 'evil-terminal-cursor-changer)
    (evil-terminal-cursor-changer-activate)
    (spacemacs/load-theme 'spacemacs-dark))

  (setq org-agenda-files (list "~/Dropbox/org/tooploox.org"
                               "~/Dropbox/org/nowthis.org"
                               "~/Dropbox/org/home.org"))

  ;; Use ; for grizzl-powered fuzzy search through files in project
  (define-key evil-normal-state-map (kbd ";") 'projectile-find-file)

  (evil-leader/set-key "wd" 'kill-buffer-and-window)
  (define-key evil-emacs-state-map (kbd "C-d") 'kill-buffer-and-window)

  (add-hook 'doc-view-mode-hook 'auto-revert-mode)

  (setq-default company-backends-ruby-mode '((company-robe :with company-dabbrev company-yasnippet)
                                             (company-dabbrev :with company-yasnippet)))


  (global-company-mode)

  (eval-after-load "rubocop" '(diminish 'rubocop-mode "🅡"))


  (eval-after-load "alchemist" '(diminish 'alchemist-mode "🅡"))

  (eval-after-load "auto-dictionary-mode" '(diminish 'ispell-minor-mode "🅡"))

  (eval-after-load "utop" '(diminish 'utop-minor-mode "🅤"))
  (eval-after-load "merlin" '(diminish 'merlin-mode "🅜"))

  (setq fci-rule-column 120)
  (add-hook 'prog-mode-hook 'fci-mode)

  (setq-default js2-basic-offset 2)
  (setq-default js-indent-level 2)

  (setq browse-url-browser-function 'browse-url-generic
        engine/browser-function 'browse-url-generic
        browse-url-generic-program "open")


  (spacemacs/set-leader-keys "os" 'delete-window)
  (spacemacs/set-leader-keys "qw" 'suspend-frame)
  (defun iterm-focus ()
    (interactive)
    (do-applescript
     " do shell script \"open -a iTerm\"\n"))

  (spacemacs/set-leader-keys "'" 'iterm-focus)

  (global-set-key (kbd "C-x g") 'google-this-noconfirm)

  (add-hook 'ruby-mode-hook (lambda ()
                              (define-key evil-normal-state-map (kbd "gS") 'splitjoin)
                              (setq projectile-tags-command "ripper-tags -R -f \"%s\" %s")))

  (add-hook 'sh-mode (lambda ()
                       (spacemacs/ggtags-mode-enable)
                       (spacemacs/helm-gtags-define-keys-for-mode 'sh-mode)))


  (require 'ansi-color)
  (defun colorize-compilation-buffer ()
    (let ((inhibit-read-only t))
      (ansi-color-apply-on-region (point-min) (point-max))))
  (add-hook 'compilation-filter-hook 'colorize-compilation-buffer)

  ;; Bind clang-format-buffer to tab
  ;; Bind clang-format-region to C-M-tab
  (add-hook 'c-c++-mode-hook 'clang-format-bindings)
  (add-hook 'c-c++-mode-hook 'flycheck-mode)
  (defun clang-format-bindings ()
    (define-key c-c++-mode-map [C-M-tab] 'clang-format-region)
    (define-key c-c++-mode-map [tab] 'clang-format-buffer))

  (evil-set-initial-state 'utop-mode 'emacs))

(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(package-selected-packages
   (quote
    (mmt caml powerline yaml-mode pcre2el log4e gntp sml-mode mmm-mode parent-mode ham-mode html-to-markdown gitignore-mode fringe-helper git-gutter+ git-gutter flyspell-correct flx anzu goto-chg undo-tree websocket json-mode tablist json-snatcher json-reformat diminish autothemer web-completion-data dash-functional pos-tip ghc inflections edn multiple-cursors paredit peg eval-sexp-fu seq spinner queue bind-map bind-key anaconda-mode pythonic f s pkg-info epl async popup package-build mmm-jinja2 faceup org docker-tramp cider clojure-mode rust-mode packed elixir-mode auto-complete auctex tern iedit smartparens highlight evil flycheck haskell-mode go-mode company request helm helm-core yasnippet avy skewer-mode js2-mode simple-httpd magit magit-popup git-commit with-editor markdown-mode alert projectile hydra inf-ruby haml-mode auctex-latexmk zonokai-theme zenburn-theme zen-and-art-theme yapfify ws-butler window-numbering which-key web-mode web-beautify volatile-highlights vi-tilde-fringe uuidgen utop use-package underwater-theme ujelly-theme typit twilight-theme twilight-bright-theme twilight-anti-bright-theme tuareg tronesque-theme toxi-theme toml-mode toc-org tao-theme tangotango-theme tango-plus-theme tango-2-theme tagedit systemd sunny-day-theme sublime-themes subatomic256-theme subatomic-theme stickyfunc-enhance srefactor sql-indent splitjoin spacemacs-theme spaceline spacegray-theme soothe-theme solarized-theme soft-stone-theme soft-morning-theme soft-charcoal-theme smyx-theme smeargle slim-mode seti-theme seeing-is-believing scss-mode sass-mode salt-mode rvm ruby-tools ruby-test-mode rubocop rspec-mode robe reverse-theme restart-emacs rbenv rake rainbow-mode rainbow-identifiers rainbow-delimiters railscasts-theme racket-mode racer quelpa pyvenv pytest pyenv-mode py-isort purple-haze-theme pug-mode professional-theme popwin planet-theme pip-requirements phoenix-dark-pink-theme phoenix-dark-mono-theme persp-mode pastels-on-dark-theme paradox pacmacs orgit organic-green-theme org-projectile org-present org-pomodoro org-plus-contrib org-download org-bullets open-junk-file omtose-phellack-theme oldlace-theme ocp-indent occidental-theme obsidian-theme ob-sml ob-elixir noctilux-theme niflheim-theme nginx-mode neotree naquadah-theme mwim mustang-theme move-text monokai-theme monochrome-theme molokai-theme moe-theme minitest minimal-theme merlin material-theme markdown-toc majapahit-theme magit-gitflow macrostep lush-theme lua-mode lorem-ipsum llvm-mode livid-mode live-py-mode linum-relative link-hint light-soap-theme less-css-mode latex-preview-pane latex-pretty-symbols jsx-mode js2-refactor js-doc jinja2-mode jbeans-theme jazz-theme ir-black-theme intero insert-shebang inkpot-theme info+ indent-guide ido-vertical-mode hy-mode hungry-delete htmlize hlinum hlint-refactor hl-todo hindent highlight-parentheses highlight-numbers highlight-indentation hide-comnt heroku-theme hemisu-theme help-fns+ helm-themes helm-swoop helm-pydoc helm-projectile helm-mode-manager helm-make helm-hoogle helm-gtags helm-gitignore helm-flx helm-descbinds helm-css-scss helm-company helm-c-yasnippet helm-ag hc-zenburn-theme haskell-snippets gruvbox-theme gruber-darker-theme groovy-mode grizzl grandshell-theme gotham-theme google-translate google-this golden-ratio go-guru go-eldoc gnuplot gmail-message-mode gitconfig-mode gitattributes-mode git-timemachine git-messenger git-link git-gutter-fringe git-gutter-fringe+ gh-md ggtags gandalf-theme flyspell-correct-helm flycheck-rust flycheck-pos-tip flycheck-mix flycheck-haskell flx-ido flatui-theme flatland-theme fish-mode firebelly-theme fill-column-indicator feature-mode farmhouse-theme fancy-battery eyebrowse expand-region exec-path-from-shell evil-visualstar evil-visual-mark-mode evil-unimpaired evil-tutor evil-terminal-cursor-changer evil-surround evil-snipe evil-search-highlight-persist evil-numbers evil-nerd-commenter evil-mc evil-matchit evil-magit evil-lisp-state evil-indent-plus evil-iedit-state evil-exchange evil-escape evil-ediff evil-commentary evil-args evil-anzu espresso-theme engine-mode emmet-mode elisp-slime-nav ein edit-server dumb-jump dracula-theme dockerfile-mode docker django-theme disaster diff-hl define-word darktooth-theme darkokai-theme darkmine-theme darkburn-theme dakrone-theme cython-mode cyberpunk-theme csv-mode company-web company-tern company-statistics company-shell company-quickhelp company-go company-ghci company-ghc company-cabal company-c-headers company-auctex company-anaconda column-enforce-mode color-theme-sanityinc-tomorrow color-theme-sanityinc-solarized color-identifiers-mode coffee-mode cmm-mode cmake-mode clues-theme clojure-snippets clj-refactor clean-aindent-mode clang-format cider-eval-sexp-fu chruby cherry-blossom-theme cargo busybee-theme bundler bubbleberry-theme birds-of-paradise-plus-theme badwolf-theme auto-yasnippet auto-highlight-symbol auto-dictionary auto-compile apropospriate-theme anti-zenburn-theme ansible-doc ansible ample-zen-theme ample-theme alect-themes alchemist aggressive-indent afternoon-theme adaptive-wrap ace-window ace-link ace-jump-helm-line ac-ispell 2048-game))))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 )
