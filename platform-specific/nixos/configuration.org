:CONFIG:
#+startup: indent
:END:
* ~configuration.nix~
:PROPERTIES:
:header-args:nix: :tangle "/su::/etc/nixos/configuration.nix"  :mkdirp yes :comments no
:header-args: :mkdirp yes :comments no
:END:
** preamble
#+begin_src nix
{ config, lib, pkgs, grub2-themes, ... }:

{
  imports =
    [ # Include the results of the hardware scan.
      ./hardware-configuration.nix
      grub2-themes.nixosModule
    ];
#+end_src
** boot
#+begin_src nix
  # Use the systemd-boot EFI boot loader.
  boot.loader.systemd-boot.enable = false;
  boot.loader.efi.canTouchEfiVariables = true;
  boot.loader.grub = {
      enable = true;
      version = 2;
      device = "nodev";
      efiSupport = true;
      enableCryptodisk = true;
      font = "${pkgs.hack-font}/share/fonts/hack/Hack-Regular.ttf";
      fontSize = 20;
  };
  boot.loader.efi.efiSysMountPoint = "/boot/efi";
  boot.kernelPackages = pkgs.linuxPackages_latest;
  boot.kernelParams = [ "mem_sleep_default=deep" ];
  boot.kernel.sysctl."net.core.rmem_max" = 2500000;
#+end_src

** doas instead of sudo
#+begin_src nix
  security.sudo.enable = false;
  security.doas = {
    enable = true;
    extraRules = [{
	 users = [ "lczaplinski" ];
         runAs = "lczaplinski-docker";
         noPass = true;
         setEnv = [  "AWS_ACCESS_KEY_ID" "AWS_DEFAULT_REGION" "AWS_REGION" "AWS_SECRET_ACCESS_KEY" "AWS_SECURITY_TOKEN" "AWS_SESSION_EXPIRATION" "AWS_SESSION_TOKEN" "AWS_VAULT" ];
    }];
  };

#+end_src

** docker w/ user-ns remap
TODO: 22.05 introduced native support, no need to roll own user :)
#+begin_src nix
  # https://rdes.gitlab.io/posts/2016-08-29-enabling-dockers-user-namespaces-in-nixos.html
  virtualisation.docker = {
    enable = true;
    extraOptions = "--userns-remap=default";
  };
  users.groups.dockremap.gid = 10000;
  users.users.dockremap = {
    isSystemUser = true;
    uid = 10000;
    group = "dockremap";
    subUidRanges = [
      { startUid = 100000; count = 65536; }
    ];
    subGidRanges = [
      { startGid = 100000; count = 65536; }
    ];
  };
 #+end_src

** shells
#+begin_src nix
  users.extraUsers.root.shell = pkgs.bash;
  users.defaultUserShell = pkgs.zsh;
#+end_src

** networking
#+begin_src nix
  networking.hostName = "r-work-nixos"; # Define your hostname.
  # networking.wireless.enable = true;  # Enables wireless support via wpa_supplicant.
  # networking.wireless.userControlled.enable = true;
  networking.networkmanager.enable = true;

  # Set your time zone.
  time.timeZone = "Europe/Warsaw";

  # The global useDHCP flag is deprecated, therefore explicitly set to false here.
  # Per-interface useDHCP will be mandatory in the future, so this generated config
  # replicates the default behaviour.
  # networking.useDHCP = false;
  # networking.interfaces.enp0s13f0u1u4.useDHCP = true;

  # Configure network proxy if necessary
  # networking.proxy.default = "http://user:password@proxy:port/";
  # networking.proxy.noProxy = "127.0.0.1,localhost,internal.domain";

  # Open ports in the firewall.
  networking.firewall = {
    allowedTCPPorts = [
       6001 # shairport
       631 # avahi
       ];

    allowedUDPPortRanges = [
      { from = 6001; to = 6199; } # shairport
    ];

    allowedUDPPorts = [
      5353 # avahi
      631 # avahi
    ];
  };
  # Or disable the firewall altogether.
  # networking.firewall.enable = false;

  # Select internationalisation properties.
  i18n.defaultLocale = "en_GB.UTF-8";
  # console = {
  #   font = "Lat2-Terminus16";
  #   keyMap = "us";
  # };
#+end_src
** services
#+begin_src nix
  # List services that you want to enable:

  # https://nixos.wiki/wiki/Yubikey
  services.udev.packages = [ pkgs.yubikey-personalization ];

  services.pcscd.enable = true;

  services.keybase.enable = true;

  # Enable the OpenSSH daemon.
  # services.openssh.enable = true;

  services.clamav = {
    daemon.enable = true;
    updater.enable = true;
  };

  services.thermald.enable = true;

  # Enable CUPS to print documents.
  services.printing.enable = true;

  # Enable sound.
  sound.enable = false;
  hardware.pulseaudio.enable = false;
  # https://nixos.wiki/wiki/PipeWire
  security.rtkit.enable = true;
  services.pipewire = {
    enable = true;
    alsa.enable = true;
    alsa.support32Bit = true;
    pulse.enable = true;
    # If you want to use JACK applications, uncomment this
    #jack.enable = true;
  };

  # https://nixos.wiki/wiki/Printing - for shairport
  services.avahi.enable = true;
  services.avahi.publish.enable = true;
  services.avahi.publish.userServices = true;

  # https://wiki.archlinux.org/title/Solid_state_drive
  services.fstrim.enable = true;
#+end_src

** Windowing system
#+begin_src nix
  # Enable the X11 windowing system.
  services.xserver = {
    enable = true;
    videoDrivers = [ "xf86videointel" ];
    modules = [ pkgs.xf86_input_wacom ];
    # Configure keymap in X11
    layout = "pl";
    xkbOptions = "caps:escape";
    # Enable touchpad support (enabled default in most desktopManager).
    libinput.enable = true;
  };
#+end_src
*** Plasma + SDDM
#+begin_src nix
  # Enable the Plasma 5 Desktop Environment.
  services.xserver.displayManager.sddm.enable = true;
  services.xserver.desktopManager.plasma5.enable = true;
#+end_src
*** Sway
https://nixos.wiki/wiki/Sway
https://github.com/NixOS/nixpkgs/blob/master/nixos/modules/programs/sway.nix
#+begin_src nix
programs.sway = {
    enable = true;
    wrapperFeatures.gtk = true;
};

# https://nixos.wiki/wiki/GNOME
programs.dconf.enable = true;


xdg.portal = {
  enable = true;
  wlr.enable = true;
  # gtk portal needed to make gtk apps happy
  extraPortals = [ pkgs.xdg-desktop-portal-gtk ];
};
#+end_src
** users
#+begin_src nix
  # Define a user account. Don't forget to set a password with ‘passwd’.
  users.users.lczaplinski = {
    isNormalUser = true;
    extraGroups = [
      "wheel" # Enable ‘sudo’ for the user.
      "networkmanager" # https://nixos.org/manual/nixos/stable/index.html#sec-networking
      "users"
    ];
    shell = pkgs.elvish;
    group = "lczaplinski";
  };
  users.users.lczaplinski-docker = {
    isSystemUser = true;
    group = "lczaplinski";
    extraGroups = [
      "docker" # Enable ‘docker’ for the user.
    ];
    home = "/home/docker";
    createHome = true;
  };
  users.groups.lczaplinski = {}; # Create shared group between main user and -docker one
  system.activationScripts.shareHome = lib.stringAfter [ "users" ] ''
    chmod g+rwx /home/lczaplinski
  '';
#+end_src

** system packages
#+begin_src nix
  # List packages installed in system profile. To search, run:
  # $ nix search wget
  environment.systemPackages = (with pkgs; [
    wget
    firefox
    librewolf-wayland
    yakuake
    yubioath-desktop
    slack
    lsof
    fd
    zoom-us
    stow
    elvish
    zoxide
    go
    xsel
    xclip
    rclone
    signal-desktop
    kgpg
    gparted
    aws-vault
    google-cloud-sdk
    awscli
    aws-sam-cli
    htop
    fzf
    python3Minimal
    ark
    sd
    keybase-gui
    helix
    zsh
    thunderbird
    birdtray
    libsForQt5.kwallet
    libsForQt5.kate
    libsForQt5.krdc
    libsForQt5.bismuth
    libsForQt5.qt5ct
    shairport-sync
    vokoscreen-ng
    mpv
    shotcut
    sx
    du-dust
    weylus
    powertop
    cpupower-gui
    # For waybar tray support
    libappindicator
    libappindicator-gtk3
    # modify external screen brightness
    brightnessctl
    ddcutil
    ddcui
    # soundcontrol
    pavucontrol
    # gsettings
    glib
    nwg-launchers
  ]) ++ (with import <unstable> {}; [
  ]);

  # SLACK!
  nixpkgs.config.allowUnfree = true;

  fonts.fonts = with pkgs; [
    (nerdfonts.override { fonts = [ "FiraCode" "DroidSansMono" ]; })
    cozette
  ];
#+end_src

** extra user programs
TODO: do I still need those?
#+begin_src nix
  # Some programs need SUID wrappers, can be configured further or are
  # started in user sessions.
  programs.mtr.enable = true;
  programs.gnupg.agent = {
    enable = true;
    enableSSHSupport = true;
  };
  programs.ssh.startAgent = false;
 #+end_src

** nix-direnv
#+begin_src nix
  # https://github.com/nix-community/nix-direnv#via-configurationnix-in-nixos
  # at least until I have home-manager working properly :)
  # nix options for derivations to persist garbage collection
  nix.extraOptions = ''
    keep-outputs = true
    keep-derivations = true
    experimental-features = nix-command flakes
  '';
  # https://nixos.wiki/wiki/Flakes
  nix.package = pkgs.nixFlakes; # or versioned attributes like nix_2_7
  environment.pathsToLink = [
    "/share/nix-direnv"
  ];
#+end_src
** openGL
#+begin_src nix
  # https://nixos.wiki/wiki/Accelerated_Video_Playback
  nixpkgs.config.packageOverrides = pkgs: {
    vaapiIntel = pkgs.vaapiIntel.override { enableHybridCodec = true; };
  };
  hardware.opengl = {
    enable = true;
    driSupport = true;
    extraPackages = with pkgs; [
      intel-media-driver # LIBVA_DRIVER_NAME=iHD
      vaapiIntel         # LIBVA_DRIVER_NAME=i965 (older but works better for Firefox/Chromium)
      vaapiVdpau
      libvdpau-va-gl
    ];
  };
 #+end_src


** ddcutil:
#+begin_src nix
hardware.i2c.enable = true;
#+end_src

** system version
#+begin_src nix
  # This value determines the NixOS release from which the default
  # settings for stateful data, like file locations and database versions
  # on your system were taken. It‘s perfectly fine and recommended to leave
  # this value at the release version of the first install of this system.
  # Before changing this value read the documentation for this option
  # (e.g. man configuration.nix or on https://nixos.org/nixos/options.html).
  system.stateVersion = "21.11"; # Did you read the comment?
 #+end_src

** the end
#+begin_src nix
}
#+end_src
* ~flake.nix~
https://nixos.wiki/wiki/Flakes#Using_nix_flakes_with_NixOS
:PROPERTIES:
:header-args:nix: :tangle "/su::/etc/nixos/flake.nix"  :mkdirp yes :comments no
:header-args: :mkdirp yes :comments no
:END:
#+begin_src nix
{
  inputs.nixpkgs.url = github:NixOS/nixpkgs;
  inputs.nixos-hardware.url = github:NixOS/nixos-hardware;
  inputs.grub2-themes.url = github:vinceliuice/grub2-themes;

  outputs = { self, nixpkgs, ... }@attrs: {
    nixosConfigurations.r-work-nixos = nixpkgs.lib.nixosSystem {
        system = "x86_64-linux";
        specialArgs = attrs;
        modules = [ ./configuration.nix ];
    };
  };
}
#+end_src
